package gencel

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/types"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/flanksource/commons/logger"
	"golang.org/x/tools/go/packages"
)

type PkgImport struct {
	alias      string
	importPath string
}

type Package struct {
	name    string
	baseDir string
	defs    map[*ast.Ident]types.Object
	files   []*File
}

type Generator struct {
	pkg *Package
	buf bytes.Buffer // Accumulated output.

	generatedFuncNames []string
}

// ParsePkg loads and adds the Go packages named by the given patterns.
func (g *Generator) ParsePkg(patterns ...string) {
	cfg := &packages.Config{
		Mode:  packages.LoadSyntax,
		Tests: false,
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		logger.Fatalf("failed to load packages: %v", err)
	}
	if len(pkgs) != 1 {
		logger.Fatalf("expected 1 packages but found %d", len(pkgs))
	}

	g.addPackage(pkgs[0])
}

func (g *Generator) addPackage(pkg *packages.Package) {
	g.pkg = &Package{
		name:  pkg.Name,
		defs:  pkg.TypesInfo.Defs,
		files: make([]*File, 0, len(pkg.Syntax)),
	}

	if len(pkg.GoFiles) == 0 {
		return
	}

	g.pkg.baseDir = filepath.Dir(pkg.GoFiles[0])

	for i, astFile := range pkg.Syntax {
		if _, ok := exlusions[filepath.Base(pkg.GoFiles[i])]; ok {
			logger.Infof("Excluding file: %s", pkg.GoFiles[i])
			continue
		}

		g.pkg.files = append(g.pkg.files, &File{
			file: astFile,
			pkg:  g.pkg,
			path: pkg.GoFiles[i],
			name: filepath.Base(pkg.GoFiles[i]),
		})
	}
}

func (g *Generator) Generate() {
	for _, file := range g.pkg.files {
		g.generateFile(file)
	}

	g.generateExports()
}

func (g *Generator) generateExports() {
	g.clearBuf()

	// Print the header and package clause.
	g.renderHeader(g.pkg.name,
		PkgImport{importPath: "log"},
		PkgImport{importPath: "github.com/google/cel-go/common/types/ref"},
		PkgImport{importPath: "github.com/google/cel-go/cel"},
	)

	view := exportFuncsTemplateView{
		FnNames: g.generatedFuncNames,
	}
	g.renderExport(view)

	outputName := filepath.Join(g.pkg.baseDir, "cel_gen_exports.go")
	err := os.WriteFile(outputName, g.format(), 0644)
	if err != nil {
		logger.Fatalf("error writing to file: %v", err)
	}
}

// generateFile will generate the cel functions of the given file
// and write it out to a new file alongside the given file.
// The new file will be suffixed with "_gen.go"
func (g *Generator) generateFile(file *File) {
	if strings.HasSuffix(file.path, "_gen.go") {
		return
	}

	imports := []PkgImport{
		{importPath: "github.com/google/cel-go/cel"},
		{importPath: "github.com/google/cel-go/common/types"},
		{importPath: "github.com/google/cel-go/common/types/ref"},
	}
	if hardcodedImports, ok := importConf[file.name]; ok {
		imports = append(imports, hardcodedImports...)
	}

	g.clearBuf()
	g.renderHeader(g.pkg.name, imports...)

	ast.Inspect(file.file, file.visitor)
	fileName := filepath.Base(file.path)
	fileName = strings.TrimSuffix(fileName, filepath.Ext(fileName))

	if len(file.decls) == 0 {
		return
	}

	for _, decl := range file.decls {
		args := getCelArgs(decl.Args)
		v := funcDefTemplateView{
			IdentName:           fmt.Sprintf("%s%sGen", fileName, decl.Name),
			FnNameWithNamespace: fmt.Sprintf("%s.%s", fileName, decl.Name),
			FnName:              decl.Name,
			Args:                args,
			ReturnTypes:         getCelArgs(decl.ReturnTypes),
			RecvType:            decl.RecvType,
			VariadicArg:         getVariadicArg(args),
		}

		g.generatedFuncNames = append(g.generatedFuncNames, v.IdentName)
		g.render(v)
	}

	outputName := filepath.Join(filepath.Dir(file.path), fmt.Sprintf("%s_gen.go", fileName))
	err := os.WriteFile(outputName, g.format(), 0644)
	if err != nil {
		logger.Fatalf("%v", err)
	}
}

func (g *Generator) clearBuf() {
	g.buf = bytes.Buffer{}
}

func (g *Generator) renderHeader(pkgName string, imports ...PkgImport) {
	// Print the header and package clause.
	g.printf("// Code generated by gencel. DO NOT EDIT.\n\n")
	g.printf("package %s\n", pkgName)

	for _, imp := range imports {
		if imp.alias != "" {
			g.printf("import %s \"%s\"\n", imp.alias, imp.importPath)
		} else {
			g.printf("import \"%s\"\n", imp.importPath)
		}
	}

	g.printf("\n")
}

func (g *Generator) printf(format string, args ...interface{}) {
	_, err := fmt.Fprintf(&g.buf, format, args...)
	if err != nil {
		logger.Fatalf("fmt.Fprintf(): %v", err)
	}
}

func (g *Generator) renderExport(model interface{}) {
	t := template.New("export")

	t, err := t.Parse(exportAllTemplate)
	if err != nil {
		logger.Fatalf("instance template parse: %v", err)
	}

	err = t.Execute(&g.buf, model)
	if err != nil {
		logger.Fatalf("Execute: %v", err)
	}
}

func (g *Generator) render(model interface{}) {
	t := template.New("main").Funcs(tplFuncs)

	t, err := t.Parse(funcDefTemplate)
	if err != nil {
		logger.Fatalf("instance template parse: %v", err)
	}

	t, err = t.Parse(funcBodyTemplate)
	if err != nil {
		logger.Fatalf("instance template parse: %v", err)
	}

	err = t.Execute(&g.buf, model)
	if err != nil {
		logger.Fatalf("Execute: %v", err)
		return
	}
}

func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		logger.Debugf("warning: internal error: invalid Go generated: %s", err)
		logger.Debugf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

var importConf = map[string][]PkgImport{
	"time.go":     {{alias: "gotime", importPath: "time"}},
	"sockaddr.go": {{alias: "sockaddr", importPath: "github.com/hashicorp/go-sockaddr"}},
}

// List of files that should be excluded.
var exlusions = map[string]struct{}{
	"aws.go":    {},
	"base64.go": {},
	"env.go":    {},
	"gcp.go":    {},
	"net.go":    {},
}
