// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var JSONdataGen = cel.Function("data.JSON",
	cel.Overload("data.JSON_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.JSON(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var JSONArraydataGen = cel.Function("data.JSONArray",
	cel.Overload("data.JSONArray_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.JSONArray(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var YAMLdataGen = cel.Function("data.YAML",
	cel.Overload("data.YAML_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.YAML(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var YAMLArraydataGen = cel.Function("data.YAMLArray",
	cel.Overload("data.YAMLArray_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.YAMLArray(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var TOMLdataGen = cel.Function("data.TOML",
	cel.Overload("data.TOML_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.TOML(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ToJSONdataGen = cel.Function("data.ToJSON",
	cel.Overload("data.ToJSON_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.ToJSON(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ToJSONPrettydataGen = cel.Function("data.ToJSONPretty",
	cel.Overload("data.ToJSONPretty_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.ToJSONPretty(args[0].Value().(string), args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ToYAMLdataGen = cel.Function("data.ToYAML",
	cel.Overload("data.ToYAML_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.ToYAML(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ToTOMLdataGen = cel.Function("data.ToTOML",
	cel.Overload("data.ToTOML_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x DataFuncs
			a0, a1 := x.ToTOML(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)
