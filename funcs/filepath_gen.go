// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var BasefilepathGen = cel.Function("Base",
	cel.Overload("Base_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Base(args[0]))

		}),
	),
)

var CleanfilepathGen = cel.Function("Clean",
	cel.Overload("Clean_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Clean(args[0]))

		}),
	),
)

var DirfilepathGen = cel.Function("Dir",
	cel.Overload("Dir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Dir(args[0]))

		}),
	),
)

var ExtfilepathGen = cel.Function("Ext",
	cel.Overload("Ext_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Ext(args[0]))

		}),
	),
)

var FromSlashfilepathGen = cel.Function("FromSlash",
	cel.Overload("FromSlash_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.FromSlash(args[0]))

		}),
	),
)

var IsAbsfilepathGen = cel.Function("IsAbs",
	cel.Overload("IsAbs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsAbs(args[0]))

		}),
	),
)

var MatchfilepathGen = cel.Function("Match",
	cel.Overload("Match_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs
			a0, a1 := x.Match(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var RelfilepathGen = cel.Function("Rel",
	cel.Overload("Rel_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs
			a0, a1 := x.Rel(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var SplitfilepathGen = cel.Function("Split",
	cel.Overload("Split_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Split(args[0]))

		}),
	),
)

var ToSlashfilepathGen = cel.Function("ToSlash",
	cel.Overload("ToSlash_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.ToSlash(args[0]))

		}),
	),
)

var VolumeNamefilepathGen = cel.Function("VolumeName",
	cel.Overload("VolumeName_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FilePathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.VolumeName(args[0]))

		}),
	),
)
