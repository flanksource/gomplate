// Code generated by gencel. DO NOT EDIT.

package funcs

import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/common/types/ref"

var k8sIsHealthyGen = cel.Function("IsHealthy",
	cel.Overload("IsHealthy_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x KubernetesFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsHealthy(args[0]))

		}),
	),
)

var k8sGetStatusGen = cel.Function("GetStatus",
	cel.Overload("GetStatus_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x KubernetesFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.GetStatus(args[0]))

		}),
	),
)

var k8sGetHealthGen = cel.Function("GetHealth",
	cel.Overload("GetHealth_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x KubernetesFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.GetHealthMap(args[0]))

		}),
	),
)
