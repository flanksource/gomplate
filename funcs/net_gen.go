// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var LookupIPnetGen = cel.Function("LookupIP",
	cel.Overload("LookupIP_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupIP(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupIPsnetGen = cel.Function("LookupIPs",
	cel.Overload("LookupIPs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupIPs(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupCNAMEnetGen = cel.Function("LookupCNAME",
	cel.Overload("LookupCNAME_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupCNAME(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupSRVnetGen = cel.Function("LookupSRV",
	cel.Overload("LookupSRV_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupSRV(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupSRVsnetGen = cel.Function("LookupSRVs",
	cel.Overload("LookupSRVs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupSRVs(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupTXTnetGen = cel.Function("LookupTXT",
	cel.Overload("LookupTXT_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupTXT(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ParseIPnetGen = cel.Function("ParseIP",
	cel.Overload("ParseIP_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.ParseIP(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ParseIPPrefixnetGen = cel.Function("ParseIPPrefix",
	cel.Overload("ParseIPPrefix_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.ParseIPPrefix(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ParseIPRangenetGen = cel.Function("ParseIPRange",
	cel.Overload("ParseIPRange_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.ParseIPRange(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var StdParseIPnetGen = cel.Function("StdParseIP",
	cel.Overload("StdParseIP_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.StdParseIP(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var stdParseCIDRnetGen = cel.Function("stdParseCIDR",
	cel.Overload("stdParseCIDR_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.stdParseCIDR(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var StdParseCIDRnetGen = cel.Function("StdParseCIDR",
	cel.Overload("StdParseCIDR_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.StdParseCIDR(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrHostnetGen = cel.Function("CidrHost",
	cel.Overload("CidrHost_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrHost(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrNetmasknetGen = cel.Function("CidrNetmask",
	cel.Overload("CidrNetmask_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrNetmask(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrSubnetsnetGen = cel.Function("CidrSubnets",
	cel.Overload("CidrSubnets_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrSubnets(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrSubnetSizesnetGen = cel.Function("CidrSubnetSizes",
	cel.Overload("CidrSubnetSizes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrSubnetSizes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)
