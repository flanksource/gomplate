// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var LookupIPnetGen = cel.Function("net.LookupIP",
	cel.Overload("net.LookupIP_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupIP(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupIPsnetGen = cel.Function("net.LookupIPs",
	cel.Overload("net.LookupIPs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupIPs(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupCNAMEnetGen = cel.Function("net.LookupCNAME",
	cel.Overload("net.LookupCNAME_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupCNAME(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupSRVnetGen = cel.Function("net.LookupSRV",
	cel.Overload("net.LookupSRV_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupSRV(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupSRVsnetGen = cel.Function("net.LookupSRVs",
	cel.Overload("net.LookupSRVs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupSRVs(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var LookupTXTnetGen = cel.Function("net.LookupTXT",
	cel.Overload("net.LookupTXT_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.LookupTXT(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ParseIPnetGen = cel.Function("net.ParseIP",
	cel.Overload("net.ParseIP_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.ParseIP(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ParseIPPrefixnetGen = cel.Function("net.ParseIPPrefix",
	cel.Overload("net.ParseIPPrefix_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.ParseIPPrefix(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var ParseIPRangenetGen = cel.Function("net.ParseIPRange",
	cel.Overload("net.ParseIPRange_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.ParseIPRange(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var StdParseIPnetGen = cel.Function("net.StdParseIP",
	cel.Overload("net.StdParseIP_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.StdParseIP(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var stdParseCIDRnetGen = cel.Function("net.stdParseCIDR",
	cel.Overload("net.stdParseCIDR_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.stdParseCIDR(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var StdParseCIDRnetGen = cel.Function("net.StdParseCIDR",
	cel.Overload("net.StdParseCIDR_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.StdParseCIDR(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrHostnetGen = cel.Function("net.CidrHost",
	cel.Overload("net.CidrHost_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrHost(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrNetmasknetGen = cel.Function("net.CidrNetmask",
	cel.Overload("net.CidrNetmask_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrNetmask(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var CidrSubnetsnetGen = cel.Function("net.CidrSubnets",
	cel.Overload("net.CidrSubnets_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x NetFuncs
			a0, a1 := x.CidrSubnets(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)
