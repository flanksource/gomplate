// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var EC2RegionawsGen = cel.Function("EC2Region",
	cel.Overload("EC2Region_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var EC2MetaawsGen = cel.Function("EC2Meta",
	cel.Overload("EC2Meta_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var EC2DynamicawsGen = cel.Function("EC2Dynamic",
	cel.Overload("EC2Dynamic_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var EC2TagawsGen = cel.Function("EC2Tag",
	cel.Overload("EC2Tag_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var EC2TagsawsGen = cel.Function("EC2Tags",
	cel.Overload("EC2Tags_",
		nil,
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var KMSEncryptawsGen = cel.Function("KMSEncrypt",
	cel.Overload("KMSEncrypt_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var KMSDecryptawsGen = cel.Function("KMSDecrypt",
	cel.Overload("KMSDecrypt_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var UserIDawsGen = cel.Function("UserID",
	cel.Overload("UserID_",
		nil,
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var AccountawsGen = cel.Function("Account",
	cel.Overload("Account_",
		nil,
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var ARNawsGen = cel.Function("ARN",
	cel.Overload("ARN_",
		nil,
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)
