// Code generated by gencel. DO NOT EDIT.

package funcs

import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/common/types/ref"

var testAssertGen = cel.Function("test.Assert",
	cel.Overload("test.Assert_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x TestFuncs
			list, err := sliceToNative[interface{}](args[0].(ref.Val))
			if err != nil {
				return types.WrapErr(err)
			}

			result, err := x.Assert(list...)
			if err != nil {
				return types.WrapErr(err)
			}
			return types.DefaultTypeAdapter.NativeToValue(result)

		}),
	),
)

var testFailGen = cel.Function("test.Fail",
	cel.Overload("test.Fail_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x TestFuncs
			list, err := sliceToNative[interface{}](args[0].(ref.Val))
			if err != nil {
				return types.WrapErr(err)
			}

			result, err := x.Fail(list...)
			if err != nil {
				return types.WrapErr(err)
			}
			return types.DefaultTypeAdapter.NativeToValue(result)

		}),
	),
)

var testRequiredGen = cel.Function("test.Required",
	cel.Overload("test.Required_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x TestFuncs
			list, err := sliceToNative[interface{}](args[0].(ref.Val))
			if err != nil {
				return types.WrapErr(err)
			}

			result, err := x.Required(list...)
			if err != nil {
				return types.WrapErr(err)
			}
			return types.DefaultTypeAdapter.NativeToValue(result)

		}),
	),
)

var testTernaryGen = cel.Function("test.Ternary",
	cel.Overload("test.Ternary_interface{}_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x TestFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Ternary(args[0], args[1], args[2]))

		}),
	),
)

var testKindGen = cel.Function("test.Kind",
	cel.Overload("test.Kind_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x TestFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Kind(args[0]))

		}),
	),
)

var testIsKindGen = cel.Function("test.IsKind",
	cel.Overload("test.IsKind_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x TestFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsKind(args[0].Value().(string), args[1]))

		}),
	),
)
