// Code generated by gencel. DO NOT EDIT.

package funcs

import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/common/types/ref"

var fileReadGen = cel.Function("file.Read",
	cel.Overload("file.Read_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			a0, a1 := x.Read(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var fileStatGen = cel.Function("file.Stat",
	cel.Overload("file.Stat_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			a0, a1 := x.Stat(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var fileExistsGen = cel.Function("file.Exists",
	cel.Overload("file.Exists_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Exists(args[0]))

		}),
	),
)

var fileIsDirGen = cel.Function("file.IsDir",
	cel.Overload("file.IsDir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsDir(args[0]))

		}),
	),
)

var fileReadDirGen = cel.Function("file.ReadDir",
	cel.Overload("file.ReadDir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			a0, a1 := x.ReadDir(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var fileWalkGen = cel.Function("file.Walk",
	cel.Overload("file.Walk_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			a0, a1 := x.Walk(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var fileWriteGen = cel.Function("file.Write",
	cel.Overload("file.Write_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			a0, a1 := x.Write(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)
