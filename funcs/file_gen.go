// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var ReadfileGen = cel.Function("Read",
	cel.Overload("Read_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var StatfileGen = cel.Function("Stat",
	cel.Overload("Stat_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var ExistsfileGen = cel.Function("Exists",
	cel.Overload("Exists_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Exists(args[0]))

		}),
	),
)

var IsDirfileGen = cel.Function("IsDir",
	cel.Overload("IsDir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x FileFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsDir(args[0]))

		}),
	),
)

var ReadDirfileGen = cel.Function("ReadDir",
	cel.Overload("ReadDir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var WalkfileGen = cel.Function("Walk",
	cel.Overload("Walk_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var WritefileGen = cel.Function("Write",
	cel.Overload("Write_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)
