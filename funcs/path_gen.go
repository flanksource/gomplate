// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var pathBaseGen = cel.Function("path.Base",
	cel.Overload("path.Base_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Base(args[0]))

		}),
	),
)

var pathCleanGen = cel.Function("path.Clean",
	cel.Overload("path.Clean_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Clean(args[0]))

		}),
	),
)

var pathDirGen = cel.Function("path.Dir",
	cel.Overload("path.Dir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Dir(args[0]))

		}),
	),
)

var pathExtGen = cel.Function("path.Ext",
	cel.Overload("path.Ext_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Ext(args[0]))

		}),
	),
)

var pathIsAbsGen = cel.Function("path.IsAbs",
	cel.Overload("path.IsAbs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsAbs(args[0]))

		}),
	),
)

var pathJoinGen = cel.Function("path.Join",
	cel.Overload("path.Join_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs
			list := transferSlice[interface{}](args[0].(ref.Val))

			return types.DefaultTypeAdapter.NativeToValue(x.Join(list...))

		}),
	),
)

var pathMatchGen = cel.Function("path.Match",
	cel.Overload("path.Match_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			a0, a1 := x.Match(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var pathSplitGen = cel.Function("path.Split",
	cel.Overload("path.Split_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Split(args[0]))

		}),
	),
)
