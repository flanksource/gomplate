// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var BasepathGen = cel.Function("Base",
	cel.Overload("Base_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Base(args[0]))

		}),
	),
)

var CleanpathGen = cel.Function("Clean",
	cel.Overload("Clean_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Clean(args[0]))

		}),
	),
)

var DirpathGen = cel.Function("Dir",
	cel.Overload("Dir_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Dir(args[0]))

		}),
	),
)

var ExtpathGen = cel.Function("Ext",
	cel.Overload("Ext_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Ext(args[0]))

		}),
	),
)

var IsAbspathGen = cel.Function("IsAbs",
	cel.Overload("IsAbs_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.IsAbs(args[0]))

		}),
	),
)

var JoinpathGen = cel.Function("Join",
	cel.Overload("Join_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Join(args[0]))

		}),
	),
)

var MatchpathGen = cel.Function("Match",
	cel.Overload("Match_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs
			a0, a1 := x.Match(args[0], args[1])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var SplitpathGen = cel.Function("Split",
	cel.Overload("Split_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x PathFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.Split(args[0]))

		}),
	),
)
