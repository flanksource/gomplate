// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "log"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

func transferSlice[K any](arg ref.Val) []K {
	list, ok := arg.Value().([]ref.Val)
	if !ok {
		log.Printf("Not a list %T\n", arg.Value())
		return nil
	}

	var out = make([]K, len(list))
	for i, val := range list {
		out[i] = val.Value().(K)
	}

	return out
}

var CelEnvOption = []cel.EnvOption{
	awsEC2TagsGen,
	awsKMSEncryptGen,
	awsKMSDecryptGen,
	awsUserIDGen,
	awsAccountGen,
	awsARNGen,
	base64EncodeGen,
	base64DecodeGen,
	base64DecodeBytesGen,
	collHasGen,
	collAppendGen,
	collPrependGen,
	collUniqGen,
	collReverseGen,
	collJSONPathGen,
	convBoolGen,
	convToBoolGen,
	convJoinGen,
	convHasGen,
	convParseIntGen,
	convParseFloatGen,
	convParseUintGen,
	convAtoiGen,
	convURLGen,
	convToInt64Gen,
	convToIntGen,
	convToFloat64Gen,
	convToStringGen,
	convDefaultGen,
	cryptoWPAPSKGen,
	cryptoSHA1Gen,
	cryptoSHA224Gen,
	cryptoSHA256Gen,
	cryptoSHA384Gen,
	cryptoSHA512Gen,
	cryptoSHA512_224Gen,
	cryptoSHA512_256Gen,
	cryptoSHA1BytesGen,
	cryptoSHA224BytesGen,
	cryptoSHA256BytesGen,
	cryptoSHA384BytesGen,
	cryptoSHA512BytesGen,
	cryptoSHA512_224BytesGen,
	cryptoSHA512_256BytesGen,
	cryptoRSAEncryptGen,
	cryptoRSADecryptGen,
	cryptoRSADecryptBytesGen,
	cryptoRSADerivePublicKeyGen,
	cryptoECDSADerivePublicKeyGen,
	dataJSONGen,
	dataJSONArrayGen,
	dataYAMLGen,
	dataYAMLArrayGen,
	dataTOMLGen,
	dataToJSONGen,
	dataToJSONPrettyGen,
	dataToYAMLGen,
	dataToTOMLGen,
	envExpandEnvGen,
	fileReadGen,
	fileStatGen,
	fileExistsGen,
	fileIsDirGen,
	fileReadDirGen,
	fileWalkGen,
	fileWriteGen,
	filepathBaseGen,
	filepathCleanGen,
	filepathDirGen,
	filepathExtGen,
	filepathFromSlashGen,
	filepathIsAbsGen,
	filepathMatchGen,
	filepathRelGen,
	filepathSplitGen,
	filepathToSlashGen,
	filepathVolumeNameGen,
	mathIsIntGen,
	mathAddGen,
	mathIsFloatGen,
	mathIsNumGen,
	mathAbsGen,
	mathSubGen,
	mathDivGen,
	mathRemGen,
	mathPowGen,
	mathCeilGen,
	mathFloorGen,
	mathRoundGen,
	netLookupIPGen,
	netLookupIPsGen,
	netLookupCNAMEGen,
	netLookupSRVGen,
	netLookupSRVsGen,
	netLookupTXTGen,
	netParseIPGen,
	netParseIPPrefixGen,
	netParseIPRangeGen,
	netStdParseIPGen,
	netstdParseCIDRGen,
	netStdParseCIDRGen,
	netCidrHostGen,
	netCidrNetmaskGen,
	netCidrSubnetsGen,
	pathBaseGen,
	pathCleanGen,
	pathDirGen,
	pathExtGen,
	pathIsAbsGen,
	pathMatchGen,
	pathSplitGen,
	randomASCIIGen,
	randomAlphaGen,
	randomAlphaNumGen,
	randomItemGen,
	regexpFindGen,
	regexpMatchGen,
	regexpQuoteMetaGen,
	regexpReplaceGen,
	regexpReplaceLiteralGen,
	sockaddrGetAllInterfacesGen,
	sockaddrGetDefaultInterfacesGen,
	sockaddrGetPrivateInterfacesGen,
	sockaddrGetPublicInterfacesGen,
	sockaddrSortGen,
	sockaddrExcludeGen,
	sockaddrIncludeGen,
	sockaddrAttrGen,
	sockaddrJoinGen,
	sockaddrLimitGen,
	sockaddrOffsetGen,
	sockaddrUniqueGen,
	sockaddrMathGen,
	sockaddrGetPrivateIPGen,
	sockaddrGetPrivateIPsGen,
	sockaddrGetPublicIPGen,
	sockaddrGetPublicIPsGen,
	sockaddrGetInterfaceIPGen,
	sockaddrGetInterfaceIPsGen,
	stringsReplaceAllGen,
	stringsContainsGen,
	stringsHasPrefixGen,
	stringsHasSuffixGen,
	stringsRepeatGen,
	stringsSortGen,
	stringsSplitGen,
	stringsSplitNGen,
	stringsTrimGen,
	stringsTrimPrefixGen,
	stringsTrimSuffixGen,
	stringsTitleGen,
	stringsToUpperGen,
	stringsToLowerGen,
	stringsTrimSpaceGen,
	stringsTruncGen,
	stringsSlugGen,
	stringsQuoteGen,
	stringsShellQuoteGen,
	stringsSquoteGen,
	stringsSnakeCaseGen,
	stringsCamelCaseGen,
	stringsKebabCaseGen,
	testTernaryGen,
	testKindGen,
	testIsKindGen,
	timeZoneNameGen,
	timeZoneOffsetGen,
	timeParseGen,
	timeParseLocalGen,
	timeParseInLocationGen,
	timeNowGen,
	timeUnixGen,
	timeNanosecondGen,
	timeMicrosecondGen,
	timeMillisecondGen,
	timeSecondGen,
	timeMinuteGen,
	timeHourGen,
	timeParseDurationGen,
	timeSinceGen,
	timeUntilGen,
	uuidV1Gen,
	uuidV4Gen,
	uuidNilGen,
	uuidIsValidGen,
	uuidParseGen,
}
