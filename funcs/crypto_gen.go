// Code generated by "gencel";
// DO NOT EDIT.

package funcs

import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types/ref"

var PBKDF2cryptoGen = cel.Function("PBKDF2",
	cel.Overload("PBKDF2_interface{}_interface{}_interface{}_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType, cel.DynType, cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var WPAPSKcryptoGen = cel.Function("WPAPSK",
	cel.Overload("WPAPSK_interface{}_interface{}",

		[]*cel.Type{
			cel.DynType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA1cryptoGen = cel.Function("SHA1",
	cel.Overload("SHA1_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA1(args[0]))

		}),
	),
)

var SHA224cryptoGen = cel.Function("SHA224",
	cel.Overload("SHA224_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA224(args[0]))

		}),
	),
)

var SHA256cryptoGen = cel.Function("SHA256",
	cel.Overload("SHA256_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA256(args[0]))

		}),
	),
)

var SHA384cryptoGen = cel.Function("SHA384",
	cel.Overload("SHA384_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA384(args[0]))

		}),
	),
)

var SHA512cryptoGen = cel.Function("SHA512",
	cel.Overload("SHA512_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA512(args[0]))

		}),
	),
)

var SHA512_224cryptoGen = cel.Function("SHA512_224",
	cel.Overload("SHA512_224_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA512_224(args[0]))

		}),
	),
)

var SHA512_256cryptoGen = cel.Function("SHA512_256",
	cel.Overload("SHA512_256_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA512_256(args[0]))

		}),
	),
)

var SHA1BytescryptoGen = cel.Function("SHA1Bytes",
	cel.Overload("SHA1Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA224BytescryptoGen = cel.Function("SHA224Bytes",
	cel.Overload("SHA224Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA256BytescryptoGen = cel.Function("SHA256Bytes",
	cel.Overload("SHA256Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA384BytescryptoGen = cel.Function("SHA384Bytes",
	cel.Overload("SHA384Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA512BytescryptoGen = cel.Function("SHA512Bytes",
	cel.Overload("SHA512Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA512_224BytescryptoGen = cel.Function("SHA512_224Bytes",
	cel.Overload("SHA512_224Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var SHA512_256BytescryptoGen = cel.Function("SHA512_256Bytes",
	cel.Overload("SHA512_256Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var BcryptcryptoGen = cel.Function("Bcrypt",
	cel.Overload("Bcrypt_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var RSAEncryptcryptoGen = cel.Function("RSAEncrypt",
	cel.Overload("RSAEncrypt_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var RSADecryptcryptoGen = cel.Function("RSADecrypt",
	cel.Overload("RSADecrypt_string_",

		[]*cel.Type{
			cel.StringType, cel.StringType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var RSADecryptBytescryptoGen = cel.Function("RSADecryptBytes",
	cel.Overload("RSADecryptBytes_string_",

		[]*cel.Type{
			cel.StringType, cel.StringType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var RSAGenerateKeycryptoGen = cel.Function("RSAGenerateKey",
	cel.Overload("RSAGenerateKey_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var RSADerivePublicKeycryptoGen = cel.Function("RSADerivePublicKey",
	cel.Overload("RSADerivePublicKey_string",

		[]*cel.Type{
			cel.StringType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var ECDSAGenerateKeycryptoGen = cel.Function("ECDSAGenerateKey",
	cel.Overload("ECDSAGenerateKey_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var ECDSADerivePublicKeycryptoGen = cel.Function("ECDSADerivePublicKey",
	cel.Overload("ECDSADerivePublicKey_string",

		[]*cel.Type{
			cel.StringType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var EncryptAEScryptoGen = cel.Function("EncryptAES",
	cel.Overload("EncryptAES_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var DecryptAEScryptoGen = cel.Function("DecryptAES",
	cel.Overload("DecryptAES_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)

var DecryptAESBytescryptoGen = cel.Function("DecryptAESBytes",
	cel.Overload("DecryptAESBytes_string_interface{}",

		[]*cel.Type{
			cel.StringType, cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			// Need to figure this out
			name := "Flanksource"
			return types.DefaultTypeAdapter.NativeToValue([]string{name, name + "suffix"})

		}),
	),
)
