// Code generated by gencel. DO NOT EDIT.

package funcs

import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/common/types/ref"

var cryptoSHA1Gen = cel.Function("crypto.SHA1",
	cel.Overload("crypto.SHA1_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA1(args[0]))

		}),
	),
)

var cryptoSHA224Gen = cel.Function("crypto.SHA224",
	cel.Overload("crypto.SHA224_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA224(args[0]))

		}),
	),
)

var cryptoSHA256Gen = cel.Function("crypto.SHA256",
	cel.Overload("crypto.SHA256_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA256(args[0]))

		}),
	),
)

var cryptoSHA384Gen = cel.Function("crypto.SHA384",
	cel.Overload("crypto.SHA384_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA384(args[0]))

		}),
	),
)

var cryptoSHA512Gen = cel.Function("crypto.SHA512",
	cel.Overload("crypto.SHA512_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA512(args[0]))

		}),
	),
)

var cryptoSHA512_224Gen = cel.Function("crypto.SHA512_224",
	cel.Overload("crypto.SHA512_224_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA512_224(args[0]))

		}),
	),
)

var cryptoSHA512_256Gen = cel.Function("crypto.SHA512_256",
	cel.Overload("crypto.SHA512_256_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			return types.DefaultTypeAdapter.NativeToValue(x.SHA512_256(args[0]))

		}),
	),
)

var cryptoSHA1BytesGen = cel.Function("crypto.SHA1Bytes",
	cel.Overload("crypto.SHA1Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA1Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var cryptoSHA224BytesGen = cel.Function("crypto.SHA224Bytes",
	cel.Overload("crypto.SHA224Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA224Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var cryptoSHA256BytesGen = cel.Function("crypto.SHA256Bytes",
	cel.Overload("crypto.SHA256Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA256Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var cryptoSHA384BytesGen = cel.Function("crypto.SHA384Bytes",
	cel.Overload("crypto.SHA384Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA384Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var cryptoSHA512BytesGen = cel.Function("crypto.SHA512Bytes",
	cel.Overload("crypto.SHA512Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA512Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var cryptoSHA512_224BytesGen = cel.Function("crypto.SHA512_224Bytes",
	cel.Overload("crypto.SHA512_224Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA512_224Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)

var cryptoSHA512_256BytesGen = cel.Function("crypto.SHA512_256Bytes",
	cel.Overload("crypto.SHA512_256Bytes_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x CryptoFuncs

			a0, a1 := x.SHA512_256Bytes(args[0])
			return types.DefaultTypeAdapter.NativeToValue([]any{
				a0, a1,
			})

		}),
	),
)
