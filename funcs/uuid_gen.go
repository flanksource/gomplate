// Code generated by gencel. DO NOT EDIT.

package funcs

import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/common/types/ref"

var uuidV1Gen = cel.Function("uuid.V1",
	cel.Overload("uuid.V1_",
		nil,
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x UUIDFuncs

			result, err := x.V1()
			if err != nil {
				return types.WrapErr(err)
			}
			return types.String(result)
		}),
	),
)

var uuidV4Gen = cel.Function("uuid.V4",
	cel.Overload("uuid.V4_",
		nil,
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x UUIDFuncs

			result, err := x.V4()
			if err != nil {
				return types.WrapErr(err)
			}
			return types.String(result)

		}),
	),
)

var uuidNilGen = cel.Function("uuid.Nil",
	cel.Overload("uuid.Nil_",
		nil,
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x UUIDFuncs

			result, err := x.Nil()
			if err != nil {
				return types.WrapErr(err)
			}
			return types.String(result)

		}),
	),
)

var uuidIsValidGen = cel.Function("uuid.IsValid",
	cel.Overload("uuid.IsValid_interface{}",

		[]*cel.Type{
			cel.StringType,
		},
		cel.BoolType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x UUIDFuncs

			result, err := x.IsValid(args[0])
			if err != nil {
				return types.WrapErr(err)
			}
			return types.Bool(result)
		}),
	),
)

var uuidParseGen = cel.Function("uuid.Parse",
	cel.Overload("uuid.Parse_interface{}",

		[]*cel.Type{
			cel.DynType,
		},
		cel.DynType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x UUIDFuncs

			result, err := x.Parse(args[0])
			if err != nil {
				return types.WrapErr(err)
			}
			return types.DefaultTypeAdapter.NativeToValue(result)

		}),
	),
)
