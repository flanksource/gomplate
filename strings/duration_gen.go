// Code generated by gencel. DO NOT EDIT.

package strings

import "github.com/google/cel-go/cel"
import "github.com/google/cel-go/common/types"
import "github.com/google/cel-go/common/types/ref"

var durationStringGen = cel.Function("duration.String",
	cel.Overload("duration.String_",
		nil,
		cel.StringType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.String())

		}),
	),
)

var durationNanosecondsGen = cel.Function("duration.Nanoseconds",
	cel.Overload("duration.Nanoseconds_",
		nil,
		cel.IntType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.Nanoseconds())

		}),
	),
)

var durationSecondsGen = cel.Function("duration.Seconds",
	cel.Overload("duration.Seconds_",
		nil,
		cel.DoubleType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.Seconds())

		}),
	),
)

var durationHoursGen = cel.Function("duration.Hours",
	cel.Overload("duration.Hours_",
		nil,
		cel.DoubleType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.Hours())

		}),
	),
)

var durationDaysGen = cel.Function("duration.Days",
	cel.Overload("duration.Days_",
		nil,
		cel.DoubleType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.Days())

		}),
	),
)

var durationWeeksGen = cel.Function("duration.Weeks",
	cel.Overload("duration.Weeks_",
		nil,
		cel.DoubleType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.Weeks())

		}),
	),
)

var durationMinutesGen = cel.Function("duration.Minutes",
	cel.Overload("duration.Minutes_",
		nil,
		cel.DoubleType,
		cel.FunctionBinding(func(args ...ref.Val) ref.Val {

			var x Duration

			return types.DefaultTypeAdapter.NativeToValue(x.Minutes())

		}),
	),
)
